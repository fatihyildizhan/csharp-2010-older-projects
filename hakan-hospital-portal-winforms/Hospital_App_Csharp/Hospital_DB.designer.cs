#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hospital_App_Csharp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hospital")]
	public partial class Hospital_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertRecord(Record instance);
    partial void UpdateRecord(Record instance);
    partial void DeleteRecord(Record instance);
    #endregion
		
		public Hospital_DBDataContext() : 
				base(global::Hospital_App_Csharp.Properties.Settings.Default.HospitalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Hospital_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Hospital_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Hospital_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Hospital_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Record> Records
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DoctorID;
		
		private string _DoctorName;
		
		private string _DoctorSurname;
		
		private bool _DoctorGender;
		
		private string _DoctorProf;
		
		private string _DoctorPhone;
		
		private EntitySet<Record> _Records;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnDoctorNameChanging(string value);
    partial void OnDoctorNameChanged();
    partial void OnDoctorSurnameChanging(string value);
    partial void OnDoctorSurnameChanged();
    partial void OnDoctorGenderChanging(bool value);
    partial void OnDoctorGenderChanged();
    partial void OnDoctorProfChanging(string value);
    partial void OnDoctorProfChanged();
    partial void OnDoctorPhoneChanging(string value);
    partial void OnDoctorPhoneChanged();
    #endregion
		
		public Doctor()
		{
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DoctorName
		{
			get
			{
				return this._DoctorName;
			}
			set
			{
				if ((this._DoctorName != value))
				{
					this.OnDoctorNameChanging(value);
					this.SendPropertyChanging();
					this._DoctorName = value;
					this.SendPropertyChanged("DoctorName");
					this.OnDoctorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorSurname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DoctorSurname
		{
			get
			{
				return this._DoctorSurname;
			}
			set
			{
				if ((this._DoctorSurname != value))
				{
					this.OnDoctorSurnameChanging(value);
					this.SendPropertyChanging();
					this._DoctorSurname = value;
					this.SendPropertyChanged("DoctorSurname");
					this.OnDoctorSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorGender", DbType="Bit NOT NULL")]
		public bool DoctorGender
		{
			get
			{
				return this._DoctorGender;
			}
			set
			{
				if ((this._DoctorGender != value))
				{
					this.OnDoctorGenderChanging(value);
					this.SendPropertyChanging();
					this._DoctorGender = value;
					this.SendPropertyChanged("DoctorGender");
					this.OnDoctorGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorProf", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DoctorProf
		{
			get
			{
				return this._DoctorProf;
			}
			set
			{
				if ((this._DoctorProf != value))
				{
					this.OnDoctorProfChanging(value);
					this.SendPropertyChanging();
					this._DoctorProf = value;
					this.SendPropertyChanged("DoctorProf");
					this.OnDoctorProfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorPhone", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string DoctorPhone
		{
			get
			{
				return this._DoctorPhone;
			}
			set
			{
				if ((this._DoctorPhone != value))
				{
					this.OnDoctorPhoneChanging(value);
					this.SendPropertyChanging();
					this._DoctorPhone = value;
					this.SendPropertyChanged("DoctorPhone");
					this.OnDoctorPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Record", Storage="_Records", ThisKey="DoctorID", OtherKey="DoctorID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private string _PatientName;
		
		private string _PatientSurname;
		
		private System.DateTime _PatientBirthDate;
		
		private bool _PatientGender;
		
		private bool _PatientMarialStatus;
		
		private string _PatientCity;
		
		private string _PatientAddress;
		
		private string _PatientPhone;
		
		private EntitySet<Record> _Records;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnPatientNameChanging(string value);
    partial void OnPatientNameChanged();
    partial void OnPatientSurnameChanging(string value);
    partial void OnPatientSurnameChanged();
    partial void OnPatientBirthDateChanging(System.DateTime value);
    partial void OnPatientBirthDateChanged();
    partial void OnPatientGenderChanging(bool value);
    partial void OnPatientGenderChanged();
    partial void OnPatientMarialStatusChanging(bool value);
    partial void OnPatientMarialStatusChanged();
    partial void OnPatientCityChanging(string value);
    partial void OnPatientCityChanged();
    partial void OnPatientAddressChanging(string value);
    partial void OnPatientAddressChanged();
    partial void OnPatientPhoneChanging(string value);
    partial void OnPatientPhoneChanged();
    #endregion
		
		public Patient()
		{
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this.OnPatientNameChanging(value);
					this.SendPropertyChanging();
					this._PatientName = value;
					this.SendPropertyChanged("PatientName");
					this.OnPatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientSurname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PatientSurname
		{
			get
			{
				return this._PatientSurname;
			}
			set
			{
				if ((this._PatientSurname != value))
				{
					this.OnPatientSurnameChanging(value);
					this.SendPropertyChanging();
					this._PatientSurname = value;
					this.SendPropertyChanged("PatientSurname");
					this.OnPatientSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientBirthDate", DbType="DateTime NOT NULL")]
		public System.DateTime PatientBirthDate
		{
			get
			{
				return this._PatientBirthDate;
			}
			set
			{
				if ((this._PatientBirthDate != value))
				{
					this.OnPatientBirthDateChanging(value);
					this.SendPropertyChanging();
					this._PatientBirthDate = value;
					this.SendPropertyChanged("PatientBirthDate");
					this.OnPatientBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientGender", DbType="Bit NOT NULL")]
		public bool PatientGender
		{
			get
			{
				return this._PatientGender;
			}
			set
			{
				if ((this._PatientGender != value))
				{
					this.OnPatientGenderChanging(value);
					this.SendPropertyChanging();
					this._PatientGender = value;
					this.SendPropertyChanged("PatientGender");
					this.OnPatientGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientMarialStatus", DbType="Bit NOT NULL")]
		public bool PatientMarialStatus
		{
			get
			{
				return this._PatientMarialStatus;
			}
			set
			{
				if ((this._PatientMarialStatus != value))
				{
					this.OnPatientMarialStatusChanging(value);
					this.SendPropertyChanging();
					this._PatientMarialStatus = value;
					this.SendPropertyChanged("PatientMarialStatus");
					this.OnPatientMarialStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientCity", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PatientCity
		{
			get
			{
				return this._PatientCity;
			}
			set
			{
				if ((this._PatientCity != value))
				{
					this.OnPatientCityChanging(value);
					this.SendPropertyChanging();
					this._PatientCity = value;
					this.SendPropertyChanged("PatientCity");
					this.OnPatientCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientAddress", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PatientAddress
		{
			get
			{
				return this._PatientAddress;
			}
			set
			{
				if ((this._PatientAddress != value))
				{
					this.OnPatientAddressChanging(value);
					this.SendPropertyChanging();
					this._PatientAddress = value;
					this.SendPropertyChanged("PatientAddress");
					this.OnPatientAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientPhone", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string PatientPhone
		{
			get
			{
				return this._PatientPhone;
			}
			set
			{
				if ((this._PatientPhone != value))
				{
					this.OnPatientPhoneChanging(value);
					this.SendPropertyChanging();
					this._PatientPhone = value;
					this.SendPropertyChanged("PatientPhone");
					this.OnPatientPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Record", Storage="_Records", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Record")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordID;
		
		private int _PatientID;
		
		private int _DoctorID;
		
		private System.DateTime _RecordCheckIn;
		
		private System.DateTime _RecordCheckOut;
		
		private int _RecordAttendent;
		
		private int _RecordVisitor;
		
		private decimal _RecordCost;
		
		private string _RecordDisease;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnRecordCheckInChanging(System.DateTime value);
    partial void OnRecordCheckInChanged();
    partial void OnRecordCheckOutChanging(System.DateTime value);
    partial void OnRecordCheckOutChanged();
    partial void OnRecordAttendentChanging(int value);
    partial void OnRecordAttendentChanged();
    partial void OnRecordVisitorChanging(int value);
    partial void OnRecordVisitorChanged();
    partial void OnRecordCostChanging(decimal value);
    partial void OnRecordCostChanged();
    partial void OnRecordDiseaseChanging(string value);
    partial void OnRecordDiseaseChanged();
    #endregion
		
		public Record()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int NOT NULL")]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordCheckIn", DbType="DateTime NOT NULL")]
		public System.DateTime RecordCheckIn
		{
			get
			{
				return this._RecordCheckIn;
			}
			set
			{
				if ((this._RecordCheckIn != value))
				{
					this.OnRecordCheckInChanging(value);
					this.SendPropertyChanging();
					this._RecordCheckIn = value;
					this.SendPropertyChanged("RecordCheckIn");
					this.OnRecordCheckInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordCheckOut", DbType="DateTime NOT NULL")]
		public System.DateTime RecordCheckOut
		{
			get
			{
				return this._RecordCheckOut;
			}
			set
			{
				if ((this._RecordCheckOut != value))
				{
					this.OnRecordCheckOutChanging(value);
					this.SendPropertyChanging();
					this._RecordCheckOut = value;
					this.SendPropertyChanged("RecordCheckOut");
					this.OnRecordCheckOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordAttendent", DbType="Int NOT NULL")]
		public int RecordAttendent
		{
			get
			{
				return this._RecordAttendent;
			}
			set
			{
				if ((this._RecordAttendent != value))
				{
					this.OnRecordAttendentChanging(value);
					this.SendPropertyChanging();
					this._RecordAttendent = value;
					this.SendPropertyChanged("RecordAttendent");
					this.OnRecordAttendentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordVisitor", DbType="Int NOT NULL")]
		public int RecordVisitor
		{
			get
			{
				return this._RecordVisitor;
			}
			set
			{
				if ((this._RecordVisitor != value))
				{
					this.OnRecordVisitorChanging(value);
					this.SendPropertyChanging();
					this._RecordVisitor = value;
					this.SendPropertyChanged("RecordVisitor");
					this.OnRecordVisitorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordCost", DbType="Money NOT NULL")]
		public decimal RecordCost
		{
			get
			{
				return this._RecordCost;
			}
			set
			{
				if ((this._RecordCost != value))
				{
					this.OnRecordCostChanging(value);
					this.SendPropertyChanging();
					this._RecordCost = value;
					this.SendPropertyChanged("RecordCost");
					this.OnRecordCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordDisease", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RecordDisease
		{
			get
			{
				return this._RecordDisease;
			}
			set
			{
				if ((this._RecordDisease != value))
				{
					this.OnRecordDiseaseChanging(value);
					this.SendPropertyChanging();
					this._RecordDisease = value;
					this.SendPropertyChanged("RecordDisease");
					this.OnRecordDiseaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Record", Storage="_Doctor", ThisKey="DoctorID", OtherKey="DoctorID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._DoctorID = value.DoctorID;
					}
					else
					{
						this._DoctorID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Record", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
