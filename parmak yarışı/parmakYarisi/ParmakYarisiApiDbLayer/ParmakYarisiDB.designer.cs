#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParmakYarisiApiDbLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="7Renk-ParmakYarisi")]
	public partial class ParmakYarisiDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertUserDetail(UserDetail instance);
    partial void UpdateUserDetail(UserDetail instance);
    partial void DeleteUserDetail(UserDetail instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertLevel(Level instance);
    partial void UpdateLevel(Level instance);
    partial void DeleteLevel(Level instance);
    partial void InsertRecordAccuracy(RecordAccuracy instance);
    partial void UpdateRecordAccuracy(RecordAccuracy instance);
    partial void DeleteRecordAccuracy(RecordAccuracy instance);
    partial void InsertRecordTime(RecordTime instance);
    partial void UpdateRecordTime(RecordTime instance);
    partial void DeleteRecordTime(RecordTime instance);
    partial void InsertRecordWPM(RecordWPM instance);
    partial void UpdateRecordWPM(RecordWPM instance);
    partial void DeleteRecordWPM(RecordWPM instance);
    partial void InsertSentence(Sentence instance);
    partial void UpdateSentence(Sentence instance);
    partial void DeleteSentence(Sentence instance);
    partial void InsertSentenceDescription(SentenceDescription instance);
    partial void UpdateSentenceDescription(SentenceDescription instance);
    partial void DeleteSentenceDescription(SentenceDescription instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public ParmakYarisiDBDataContext() : 
				base(global::ParmakYarisiApiDbLayer.Properties.Settings.Default._7Renk_ParmakYarisiConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ParmakYarisiDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParmakYarisiDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParmakYarisiDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParmakYarisiDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<UserDetail> UserDetails
		{
			get
			{
				return this.GetTable<UserDetail>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Level> Levels
		{
			get
			{
				return this.GetTable<Level>();
			}
		}
		
		public System.Data.Linq.Table<RecordAccuracy> RecordAccuracies
		{
			get
			{
				return this.GetTable<RecordAccuracy>();
			}
		}
		
		public System.Data.Linq.Table<RecordTime> RecordTimes
		{
			get
			{
				return this.GetTable<RecordTime>();
			}
		}
		
		public System.Data.Linq.Table<RecordWPM> RecordWPMs
		{
			get
			{
				return this.GetTable<RecordWPM>();
			}
		}
		
		public System.Data.Linq.Table<Sentence> Sentences
		{
			get
			{
				return this.GetTable<Sentence>();
			}
		}
		
		public System.Data.Linq.Table<SentenceDescription> SentenceDescriptions
		{
			get
			{
				return this.GetTable<SentenceDescription>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private int _CityRequiredLevelID;
		
		private EntitySet<UserDetail> _UserDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnCityRequiredLevelIDChanging(int value);
    partial void OnCityRequiredLevelIDChanged();
    #endregion
		
		public City()
		{
			this._UserDetails = new EntitySet<UserDetail>(new Action<UserDetail>(this.attach_UserDetails), new Action<UserDetail>(this.detach_UserDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityRequiredLevelID", DbType="Int NOT NULL")]
		public int CityRequiredLevelID
		{
			get
			{
				return this._CityRequiredLevelID;
			}
			set
			{
				if ((this._CityRequiredLevelID != value))
				{
					this.OnCityRequiredLevelIDChanging(value);
					this.SendPropertyChanging();
					this._CityRequiredLevelID = value;
					this.SendPropertyChanged("CityRequiredLevelID");
					this.OnCityRequiredLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UserDetail", Storage="_UserDetails", ThisKey="CityID", OtherKey="UserCityID")]
		public EntitySet<UserDetail> UserDetails
		{
			get
			{
				return this._UserDetails;
			}
			set
			{
				this._UserDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDetail")]
	public partial class UserDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserDetailID;
		
		private System.Guid _UserID;
		
		private int _UserXP;
		
		private int _UserPoint;
		
		private int _UserLevelID;
		
		private int _UserCityID;
		
		private EntityRef<City> _City;
		
		private EntityRef<Level> _Level;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserDetailIDChanging(int value);
    partial void OnUserDetailIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnUserXPChanging(int value);
    partial void OnUserXPChanged();
    partial void OnUserPointChanging(int value);
    partial void OnUserPointChanged();
    partial void OnUserLevelIDChanging(int value);
    partial void OnUserLevelIDChanged();
    partial void OnUserCityIDChanging(int value);
    partial void OnUserCityIDChanged();
    #endregion
		
		public UserDetail()
		{
			this._City = default(EntityRef<City>);
			this._Level = default(EntityRef<Level>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserDetailID
		{
			get
			{
				return this._UserDetailID;
			}
			set
			{
				if ((this._UserDetailID != value))
				{
					this.OnUserDetailIDChanging(value);
					this.SendPropertyChanging();
					this._UserDetailID = value;
					this.SendPropertyChanged("UserDetailID");
					this.OnUserDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserXP", DbType="Int NOT NULL")]
		public int UserXP
		{
			get
			{
				return this._UserXP;
			}
			set
			{
				if ((this._UserXP != value))
				{
					this.OnUserXPChanging(value);
					this.SendPropertyChanging();
					this._UserXP = value;
					this.SendPropertyChanged("UserXP");
					this.OnUserXPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPoint", DbType="Int NOT NULL")]
		public int UserPoint
		{
			get
			{
				return this._UserPoint;
			}
			set
			{
				if ((this._UserPoint != value))
				{
					this.OnUserPointChanging(value);
					this.SendPropertyChanging();
					this._UserPoint = value;
					this.SendPropertyChanged("UserPoint");
					this.OnUserPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLevelID", DbType="Int NOT NULL")]
		public int UserLevelID
		{
			get
			{
				return this._UserLevelID;
			}
			set
			{
				if ((this._UserLevelID != value))
				{
					if (this._Level.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserLevelIDChanging(value);
					this.SendPropertyChanging();
					this._UserLevelID = value;
					this.SendPropertyChanged("UserLevelID");
					this.OnUserLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCityID", DbType="Int NOT NULL")]
		public int UserCityID
		{
			get
			{
				return this._UserCityID;
			}
			set
			{
				if ((this._UserCityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCityIDChanging(value);
					this.SendPropertyChanging();
					this._UserCityID = value;
					this.SendPropertyChanged("UserCityID");
					this.OnUserCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UserDetail", Storage="_City", ThisKey="UserCityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.UserDetails.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.UserDetails.Add(this);
						this._UserCityID = value.CityID;
					}
					else
					{
						this._UserCityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Level_UserDetail", Storage="_Level", ThisKey="UserLevelID", OtherKey="LevelID", IsForeignKey=true)]
		public Level Level
		{
			get
			{
				return this._Level.Entity;
			}
			set
			{
				Level previousValue = this._Level.Entity;
				if (((previousValue != value) 
							|| (this._Level.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Level.Entity = null;
						previousValue.UserDetails.Remove(this);
					}
					this._Level.Entity = value;
					if ((value != null))
					{
						value.UserDetails.Add(this);
						this._UserLevelID = value.LevelID;
					}
					else
					{
						this._UserLevelID = default(int);
					}
					this.SendPropertyChanged("Level");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserDetail", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserDetails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserDetails.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageID;
		
		private string _LanguageName;
		
		private string _LanguageCountry;
		
		private string _LanguageSummary;
		
		private string _LanguageImgLink;
		
		private EntitySet<Sentence> _Sentences;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    partial void OnLanguageCountryChanging(string value);
    partial void OnLanguageCountryChanged();
    partial void OnLanguageSummaryChanging(string value);
    partial void OnLanguageSummaryChanged();
    partial void OnLanguageImgLinkChanging(string value);
    partial void OnLanguageImgLinkChanged();
    #endregion
		
		public Language()
		{
			this._Sentences = new EntitySet<Sentence>(new Action<Sentence>(this.attach_Sentences), new Action<Sentence>(this.detach_Sentences));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LanguageName
		{
			get
			{
				return this._LanguageName;
			}
			set
			{
				if ((this._LanguageName != value))
				{
					this.OnLanguageNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageName = value;
					this.SendPropertyChanged("LanguageName");
					this.OnLanguageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageCountry", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LanguageCountry
		{
			get
			{
				return this._LanguageCountry;
			}
			set
			{
				if ((this._LanguageCountry != value))
				{
					this.OnLanguageCountryChanging(value);
					this.SendPropertyChanging();
					this._LanguageCountry = value;
					this.SendPropertyChanged("LanguageCountry");
					this.OnLanguageCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageSummary", DbType="NVarChar(100)")]
		public string LanguageSummary
		{
			get
			{
				return this._LanguageSummary;
			}
			set
			{
				if ((this._LanguageSummary != value))
				{
					this.OnLanguageSummaryChanging(value);
					this.SendPropertyChanging();
					this._LanguageSummary = value;
					this.SendPropertyChanged("LanguageSummary");
					this.OnLanguageSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageImgLink", DbType="NVarChar(255)")]
		public string LanguageImgLink
		{
			get
			{
				return this._LanguageImgLink;
			}
			set
			{
				if ((this._LanguageImgLink != value))
				{
					this.OnLanguageImgLinkChanging(value);
					this.SendPropertyChanging();
					this._LanguageImgLink = value;
					this.SendPropertyChanged("LanguageImgLink");
					this.OnLanguageImgLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Sentence", Storage="_Sentences", ThisKey="LanguageID", OtherKey="SentenceLanguageID")]
		public EntitySet<Sentence> Sentences
		{
			get
			{
				return this._Sentences;
			}
			set
			{
				this._Sentences.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sentences(Sentence entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Sentences(Sentence entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Level]")]
	public partial class Level : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LevelID;
		
		private string _LevelName;
		
		private int _LevelRequiredXP;
		
		private EntitySet<UserDetail> _UserDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelIDChanging(int value);
    partial void OnLevelIDChanged();
    partial void OnLevelNameChanging(string value);
    partial void OnLevelNameChanged();
    partial void OnLevelRequiredXPChanging(int value);
    partial void OnLevelRequiredXPChanged();
    #endregion
		
		public Level()
		{
			this._UserDetails = new EntitySet<UserDetail>(new Action<UserDetail>(this.attach_UserDetails), new Action<UserDetail>(this.detach_UserDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LevelName
		{
			get
			{
				return this._LevelName;
			}
			set
			{
				if ((this._LevelName != value))
				{
					this.OnLevelNameChanging(value);
					this.SendPropertyChanging();
					this._LevelName = value;
					this.SendPropertyChanged("LevelName");
					this.OnLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelRequiredXP", DbType="Int NOT NULL")]
		public int LevelRequiredXP
		{
			get
			{
				return this._LevelRequiredXP;
			}
			set
			{
				if ((this._LevelRequiredXP != value))
				{
					this.OnLevelRequiredXPChanging(value);
					this.SendPropertyChanging();
					this._LevelRequiredXP = value;
					this.SendPropertyChanged("LevelRequiredXP");
					this.OnLevelRequiredXPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Level_UserDetail", Storage="_UserDetails", ThisKey="LevelID", OtherKey="UserLevelID")]
		public EntitySet<UserDetail> UserDetails
		{
			get
			{
				return this._UserDetails;
			}
			set
			{
				this._UserDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.Level = this;
		}
		
		private void detach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.Level = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecordAccuracy")]
	public partial class RecordAccuracy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordAccuracyID;
		
		private System.Guid _UserID;
		
		private int _SentenceID;
		
		private System.DateTime _RecordDate;
		
		private decimal _RecordScore;
		
		private EntityRef<Sentence> _Sentence;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordAccuracyIDChanging(int value);
    partial void OnRecordAccuracyIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnSentenceIDChanging(int value);
    partial void OnSentenceIDChanged();
    partial void OnRecordDateChanging(System.DateTime value);
    partial void OnRecordDateChanged();
    partial void OnRecordScoreChanging(decimal value);
    partial void OnRecordScoreChanged();
    #endregion
		
		public RecordAccuracy()
		{
			this._Sentence = default(EntityRef<Sentence>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordAccuracyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecordAccuracyID
		{
			get
			{
				return this._RecordAccuracyID;
			}
			set
			{
				if ((this._RecordAccuracyID != value))
				{
					this.OnRecordAccuracyIDChanging(value);
					this.SendPropertyChanging();
					this._RecordAccuracyID = value;
					this.SendPropertyChanged("RecordAccuracyID");
					this.OnRecordAccuracyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceID", DbType="Int NOT NULL")]
		public int SentenceID
		{
			get
			{
				return this._SentenceID;
			}
			set
			{
				if ((this._SentenceID != value))
				{
					if (this._Sentence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentenceIDChanging(value);
					this.SendPropertyChanging();
					this._SentenceID = value;
					this.SendPropertyChanged("SentenceID");
					this.OnSentenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordDate", DbType="DateTime NOT NULL")]
		public System.DateTime RecordDate
		{
			get
			{
				return this._RecordDate;
			}
			set
			{
				if ((this._RecordDate != value))
				{
					this.OnRecordDateChanging(value);
					this.SendPropertyChanging();
					this._RecordDate = value;
					this.SendPropertyChanged("RecordDate");
					this.OnRecordDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordScore", DbType="Decimal(3,1) NOT NULL")]
		public decimal RecordScore
		{
			get
			{
				return this._RecordScore;
			}
			set
			{
				if ((this._RecordScore != value))
				{
					this.OnRecordScoreChanging(value);
					this.SendPropertyChanging();
					this._RecordScore = value;
					this.SendPropertyChanged("RecordScore");
					this.OnRecordScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sentence_RecordAccuracy", Storage="_Sentence", ThisKey="SentenceID", OtherKey="SentenceID", IsForeignKey=true)]
		public Sentence Sentence
		{
			get
			{
				return this._Sentence.Entity;
			}
			set
			{
				Sentence previousValue = this._Sentence.Entity;
				if (((previousValue != value) 
							|| (this._Sentence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sentence.Entity = null;
						previousValue.RecordAccuracies.Remove(this);
					}
					this._Sentence.Entity = value;
					if ((value != null))
					{
						value.RecordAccuracies.Add(this);
						this._SentenceID = value.SentenceID;
					}
					else
					{
						this._SentenceID = default(int);
					}
					this.SendPropertyChanged("Sentence");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecordAccuracy", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecordAccuracies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecordAccuracies.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecordTime")]
	public partial class RecordTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordSpeedID;
		
		private System.Guid _UserID;
		
		private int _SentenceID;
		
		private System.DateTime _RecordDate;
		
		private int _RecordScore;
		
		private EntityRef<Sentence> _Sentence;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordSpeedIDChanging(int value);
    partial void OnRecordSpeedIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnSentenceIDChanging(int value);
    partial void OnSentenceIDChanged();
    partial void OnRecordDateChanging(System.DateTime value);
    partial void OnRecordDateChanged();
    partial void OnRecordScoreChanging(int value);
    partial void OnRecordScoreChanged();
    #endregion
		
		public RecordTime()
		{
			this._Sentence = default(EntityRef<Sentence>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordSpeedID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecordSpeedID
		{
			get
			{
				return this._RecordSpeedID;
			}
			set
			{
				if ((this._RecordSpeedID != value))
				{
					this.OnRecordSpeedIDChanging(value);
					this.SendPropertyChanging();
					this._RecordSpeedID = value;
					this.SendPropertyChanged("RecordSpeedID");
					this.OnRecordSpeedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceID", DbType="Int NOT NULL")]
		public int SentenceID
		{
			get
			{
				return this._SentenceID;
			}
			set
			{
				if ((this._SentenceID != value))
				{
					if (this._Sentence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentenceIDChanging(value);
					this.SendPropertyChanging();
					this._SentenceID = value;
					this.SendPropertyChanged("SentenceID");
					this.OnSentenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordDate", DbType="DateTime NOT NULL")]
		public System.DateTime RecordDate
		{
			get
			{
				return this._RecordDate;
			}
			set
			{
				if ((this._RecordDate != value))
				{
					this.OnRecordDateChanging(value);
					this.SendPropertyChanging();
					this._RecordDate = value;
					this.SendPropertyChanged("RecordDate");
					this.OnRecordDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordScore", DbType="Int NOT NULL")]
		public int RecordScore
		{
			get
			{
				return this._RecordScore;
			}
			set
			{
				if ((this._RecordScore != value))
				{
					this.OnRecordScoreChanging(value);
					this.SendPropertyChanging();
					this._RecordScore = value;
					this.SendPropertyChanged("RecordScore");
					this.OnRecordScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sentence_RecordTime", Storage="_Sentence", ThisKey="SentenceID", OtherKey="SentenceID", IsForeignKey=true)]
		public Sentence Sentence
		{
			get
			{
				return this._Sentence.Entity;
			}
			set
			{
				Sentence previousValue = this._Sentence.Entity;
				if (((previousValue != value) 
							|| (this._Sentence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sentence.Entity = null;
						previousValue.RecordTimes.Remove(this);
					}
					this._Sentence.Entity = value;
					if ((value != null))
					{
						value.RecordTimes.Add(this);
						this._SentenceID = value.SentenceID;
					}
					else
					{
						this._SentenceID = default(int);
					}
					this.SendPropertyChanged("Sentence");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecordTime", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecordTimes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecordTimes.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecordWPM")]
	public partial class RecordWPM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordWPMID;
		
		private System.Guid _UserID;
		
		private int _SentenceID;
		
		private System.DateTime _RecordDate;
		
		private int _RecordScore;
		
		private EntityRef<Sentence> _Sentence;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordWPMIDChanging(int value);
    partial void OnRecordWPMIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnSentenceIDChanging(int value);
    partial void OnSentenceIDChanged();
    partial void OnRecordDateChanging(System.DateTime value);
    partial void OnRecordDateChanged();
    partial void OnRecordScoreChanging(int value);
    partial void OnRecordScoreChanged();
    #endregion
		
		public RecordWPM()
		{
			this._Sentence = default(EntityRef<Sentence>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordWPMID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecordWPMID
		{
			get
			{
				return this._RecordWPMID;
			}
			set
			{
				if ((this._RecordWPMID != value))
				{
					this.OnRecordWPMIDChanging(value);
					this.SendPropertyChanging();
					this._RecordWPMID = value;
					this.SendPropertyChanged("RecordWPMID");
					this.OnRecordWPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceID", DbType="Int NOT NULL")]
		public int SentenceID
		{
			get
			{
				return this._SentenceID;
			}
			set
			{
				if ((this._SentenceID != value))
				{
					if (this._Sentence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentenceIDChanging(value);
					this.SendPropertyChanging();
					this._SentenceID = value;
					this.SendPropertyChanged("SentenceID");
					this.OnSentenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordDate", DbType="DateTime NOT NULL")]
		public System.DateTime RecordDate
		{
			get
			{
				return this._RecordDate;
			}
			set
			{
				if ((this._RecordDate != value))
				{
					this.OnRecordDateChanging(value);
					this.SendPropertyChanging();
					this._RecordDate = value;
					this.SendPropertyChanged("RecordDate");
					this.OnRecordDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordScore", DbType="Int NOT NULL")]
		public int RecordScore
		{
			get
			{
				return this._RecordScore;
			}
			set
			{
				if ((this._RecordScore != value))
				{
					this.OnRecordScoreChanging(value);
					this.SendPropertyChanging();
					this._RecordScore = value;
					this.SendPropertyChanged("RecordScore");
					this.OnRecordScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sentence_RecordWPM", Storage="_Sentence", ThisKey="SentenceID", OtherKey="SentenceID", IsForeignKey=true)]
		public Sentence Sentence
		{
			get
			{
				return this._Sentence.Entity;
			}
			set
			{
				Sentence previousValue = this._Sentence.Entity;
				if (((previousValue != value) 
							|| (this._Sentence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sentence.Entity = null;
						previousValue.RecordWPMs.Remove(this);
					}
					this._Sentence.Entity = value;
					if ((value != null))
					{
						value.RecordWPMs.Add(this);
						this._SentenceID = value.SentenceID;
					}
					else
					{
						this._SentenceID = default(int);
					}
					this.SendPropertyChanged("Sentence");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecordWPM", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RecordWPMs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RecordWPMs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sentence")]
	public partial class Sentence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SentenceID;
		
		private string _SentenceText;
		
		private int _SentenceLanguageID;
		
		private System.Nullable<int> _SentenceDescriptionID;
		
		private EntitySet<RecordAccuracy> _RecordAccuracies;
		
		private EntitySet<RecordTime> _RecordTimes;
		
		private EntitySet<RecordWPM> _RecordWPMs;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<SentenceDescription> _SentenceDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSentenceIDChanging(int value);
    partial void OnSentenceIDChanged();
    partial void OnSentenceTextChanging(string value);
    partial void OnSentenceTextChanged();
    partial void OnSentenceLanguageIDChanging(int value);
    partial void OnSentenceLanguageIDChanged();
    partial void OnSentenceDescriptionIDChanging(System.Nullable<int> value);
    partial void OnSentenceDescriptionIDChanged();
    #endregion
		
		public Sentence()
		{
			this._RecordAccuracies = new EntitySet<RecordAccuracy>(new Action<RecordAccuracy>(this.attach_RecordAccuracies), new Action<RecordAccuracy>(this.detach_RecordAccuracies));
			this._RecordTimes = new EntitySet<RecordTime>(new Action<RecordTime>(this.attach_RecordTimes), new Action<RecordTime>(this.detach_RecordTimes));
			this._RecordWPMs = new EntitySet<RecordWPM>(new Action<RecordWPM>(this.attach_RecordWPMs), new Action<RecordWPM>(this.detach_RecordWPMs));
			this._Language = default(EntityRef<Language>);
			this._SentenceDescription = default(EntityRef<SentenceDescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SentenceID
		{
			get
			{
				return this._SentenceID;
			}
			set
			{
				if ((this._SentenceID != value))
				{
					this.OnSentenceIDChanging(value);
					this.SendPropertyChanging();
					this._SentenceID = value;
					this.SendPropertyChanged("SentenceID");
					this.OnSentenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SentenceText
		{
			get
			{
				return this._SentenceText;
			}
			set
			{
				if ((this._SentenceText != value))
				{
					this.OnSentenceTextChanging(value);
					this.SendPropertyChanging();
					this._SentenceText = value;
					this.SendPropertyChanged("SentenceText");
					this.OnSentenceTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceLanguageID", DbType="Int NOT NULL")]
		public int SentenceLanguageID
		{
			get
			{
				return this._SentenceLanguageID;
			}
			set
			{
				if ((this._SentenceLanguageID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentenceLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._SentenceLanguageID = value;
					this.SendPropertyChanged("SentenceLanguageID");
					this.OnSentenceLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceDescriptionID", DbType="Int")]
		public System.Nullable<int> SentenceDescriptionID
		{
			get
			{
				return this._SentenceDescriptionID;
			}
			set
			{
				if ((this._SentenceDescriptionID != value))
				{
					if (this._SentenceDescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentenceDescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._SentenceDescriptionID = value;
					this.SendPropertyChanged("SentenceDescriptionID");
					this.OnSentenceDescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sentence_RecordAccuracy", Storage="_RecordAccuracies", ThisKey="SentenceID", OtherKey="SentenceID")]
		public EntitySet<RecordAccuracy> RecordAccuracies
		{
			get
			{
				return this._RecordAccuracies;
			}
			set
			{
				this._RecordAccuracies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sentence_RecordTime", Storage="_RecordTimes", ThisKey="SentenceID", OtherKey="SentenceID")]
		public EntitySet<RecordTime> RecordTimes
		{
			get
			{
				return this._RecordTimes;
			}
			set
			{
				this._RecordTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sentence_RecordWPM", Storage="_RecordWPMs", ThisKey="SentenceID", OtherKey="SentenceID")]
		public EntitySet<RecordWPM> RecordWPMs
		{
			get
			{
				return this._RecordWPMs;
			}
			set
			{
				this._RecordWPMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Sentence", Storage="_Language", ThisKey="SentenceLanguageID", OtherKey="LanguageID", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Sentences.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Sentences.Add(this);
						this._SentenceLanguageID = value.LanguageID;
					}
					else
					{
						this._SentenceLanguageID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SentenceDescription_Sentence", Storage="_SentenceDescription", ThisKey="SentenceDescriptionID", OtherKey="SentenceDescriptionID", IsForeignKey=true)]
		public SentenceDescription SentenceDescription
		{
			get
			{
				return this._SentenceDescription.Entity;
			}
			set
			{
				SentenceDescription previousValue = this._SentenceDescription.Entity;
				if (((previousValue != value) 
							|| (this._SentenceDescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SentenceDescription.Entity = null;
						previousValue.Sentences.Remove(this);
					}
					this._SentenceDescription.Entity = value;
					if ((value != null))
					{
						value.Sentences.Add(this);
						this._SentenceDescriptionID = value.SentenceDescriptionID;
					}
					else
					{
						this._SentenceDescriptionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SentenceDescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RecordAccuracies(RecordAccuracy entity)
		{
			this.SendPropertyChanging();
			entity.Sentence = this;
		}
		
		private void detach_RecordAccuracies(RecordAccuracy entity)
		{
			this.SendPropertyChanging();
			entity.Sentence = null;
		}
		
		private void attach_RecordTimes(RecordTime entity)
		{
			this.SendPropertyChanging();
			entity.Sentence = this;
		}
		
		private void detach_RecordTimes(RecordTime entity)
		{
			this.SendPropertyChanging();
			entity.Sentence = null;
		}
		
		private void attach_RecordWPMs(RecordWPM entity)
		{
			this.SendPropertyChanging();
			entity.Sentence = this;
		}
		
		private void detach_RecordWPMs(RecordWPM entity)
		{
			this.SendPropertyChanging();
			entity.Sentence = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SentenceDescription")]
	public partial class SentenceDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SentenceDescriptionID;
		
		private string _Source;
		
		private EntitySet<Sentence> _Sentences;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSentenceDescriptionIDChanging(int value);
    partial void OnSentenceDescriptionIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    #endregion
		
		public SentenceDescription()
		{
			this._Sentences = new EntitySet<Sentence>(new Action<Sentence>(this.attach_Sentences), new Action<Sentence>(this.detach_Sentences));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentenceDescriptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SentenceDescriptionID
		{
			get
			{
				return this._SentenceDescriptionID;
			}
			set
			{
				if ((this._SentenceDescriptionID != value))
				{
					this.OnSentenceDescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._SentenceDescriptionID = value;
					this.SendPropertyChanged("SentenceDescriptionID");
					this.OnSentenceDescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(255)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SentenceDescription_Sentence", Storage="_Sentences", ThisKey="SentenceDescriptionID", OtherKey="SentenceDescriptionID")]
		public EntitySet<Sentence> Sentences
		{
			get
			{
				return this._Sentences;
			}
			set
			{
				this._Sentences.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sentences(Sentence entity)
		{
			this.SendPropertyChanging();
			entity.SentenceDescription = this;
		}
		
		private void detach_Sentences(Sentence entity)
		{
			this.SendPropertyChanging();
			entity.SentenceDescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _UserEmail;
		
		private string _UserPassword;
		
		private string _UserName;
		
		private string _UserSurname;
		
		private string _UserNickname;
		
		private System.Nullable<System.DateTime> _UserBirthDate;
		
		private System.Nullable<bool> _UserGender;
		
		private System.Nullable<System.DateTime> _UserCreationDate;
		
		private EntitySet<UserDetail> _UserDetails;
		
		private EntitySet<RecordAccuracy> _RecordAccuracies;
		
		private EntitySet<RecordTime> _RecordTimes;
		
		private EntitySet<RecordWPM> _RecordWPMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserSurnameChanging(string value);
    partial void OnUserSurnameChanged();
    partial void OnUserNicknameChanging(string value);
    partial void OnUserNicknameChanged();
    partial void OnUserBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUserBirthDateChanged();
    partial void OnUserGenderChanging(System.Nullable<bool> value);
    partial void OnUserGenderChanged();
    partial void OnUserCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUserCreationDateChanged();
    #endregion
		
		public User()
		{
			this._UserDetails = new EntitySet<UserDetail>(new Action<UserDetail>(this.attach_UserDetails), new Action<UserDetail>(this.detach_UserDetails));
			this._RecordAccuracies = new EntitySet<RecordAccuracy>(new Action<RecordAccuracy>(this.attach_RecordAccuracies), new Action<RecordAccuracy>(this.detach_RecordAccuracies));
			this._RecordTimes = new EntitySet<RecordTime>(new Action<RecordTime>(this.attach_RecordTimes), new Action<RecordTime>(this.detach_RecordTimes));
			this._RecordWPMs = new EntitySet<RecordWPM>(new Action<RecordWPM>(this.attach_RecordWPMs), new Action<RecordWPM>(this.detach_RecordWPMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSurname", DbType="NVarChar(100)")]
		public string UserSurname
		{
			get
			{
				return this._UserSurname;
			}
			set
			{
				if ((this._UserSurname != value))
				{
					this.OnUserSurnameChanging(value);
					this.SendPropertyChanging();
					this._UserSurname = value;
					this.SendPropertyChanged("UserSurname");
					this.OnUserSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserNickname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserNickname
		{
			get
			{
				return this._UserNickname;
			}
			set
			{
				if ((this._UserNickname != value))
				{
					this.OnUserNicknameChanging(value);
					this.SendPropertyChanging();
					this._UserNickname = value;
					this.SendPropertyChanged("UserNickname");
					this.OnUserNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UserBirthDate
		{
			get
			{
				return this._UserBirthDate;
			}
			set
			{
				if ((this._UserBirthDate != value))
				{
					this.OnUserBirthDateChanging(value);
					this.SendPropertyChanging();
					this._UserBirthDate = value;
					this.SendPropertyChanged("UserBirthDate");
					this.OnUserBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGender", DbType="Bit")]
		public System.Nullable<bool> UserGender
		{
			get
			{
				return this._UserGender;
			}
			set
			{
				if ((this._UserGender != value))
				{
					this.OnUserGenderChanging(value);
					this.SendPropertyChanging();
					this._UserGender = value;
					this.SendPropertyChanged("UserGender");
					this.OnUserGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UserCreationDate
		{
			get
			{
				return this._UserCreationDate;
			}
			set
			{
				if ((this._UserCreationDate != value))
				{
					this.OnUserCreationDateChanging(value);
					this.SendPropertyChanging();
					this._UserCreationDate = value;
					this.SendPropertyChanged("UserCreationDate");
					this.OnUserCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserDetail", Storage="_UserDetails", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserDetail> UserDetails
		{
			get
			{
				return this._UserDetails;
			}
			set
			{
				this._UserDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecordAccuracy", Storage="_RecordAccuracies", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<RecordAccuracy> RecordAccuracies
		{
			get
			{
				return this._RecordAccuracies;
			}
			set
			{
				this._RecordAccuracies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecordTime", Storage="_RecordTimes", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<RecordTime> RecordTimes
		{
			get
			{
				return this._RecordTimes;
			}
			set
			{
				this._RecordTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RecordWPM", Storage="_RecordWPMs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<RecordWPM> RecordWPMs
		{
			get
			{
				return this._RecordWPMs;
			}
			set
			{
				this._RecordWPMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserDetails(UserDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecordAccuracies(RecordAccuracy entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecordAccuracies(RecordAccuracy entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecordTimes(RecordTime entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecordTimes(RecordTime entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RecordWPMs(RecordWPM entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RecordWPMs(RecordWPM entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
